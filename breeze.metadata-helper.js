//#region Copyright, Version, and Description
//#endregion
(function(definition,window){if(window.breeze){definition(window.breeze);}else if(typeof require==="function"&&typeof exports==="object"&&typeof module==="object"){var b=require('breeze');definition(b);}else if(typeof define==="function"&&define["amd"]&&!window.breeze){define(['breeze'],definition);}else{throw new Error("Can't find breeze");}}(function(breeze){'use strict';var helper=function(defaultNamespace,defaultAutoGeneratedKeyType){this.defaultNamespace=defaultNamespace||'';this.defaultAutoGeneratedKeyType=defaultAutoGeneratedKeyType||breeze.AutoGeneratedKeyType.None;};helper.prototype={constructor:helper,addDataService:addDataService,addTypeNameAsResource:addTypeNameAsResource,addTypeToStore:addTypeToStore,convertValidators:convertValidators,findEntityKey:findEntityKey,inferDefaultResourceName:inferDefaultResourceName,inferValidators:inferValidators,patch:patch,pluralize:pluralize,replaceDataPropertyAliases:replaceDataPropertyAliases,replaceNavPropertyAliases:replaceNavPropertyAliases,setDefaultAutoGeneratedKeyType:setDefaultAutoGeneratedKeyType,setDefaultNamespace:setDefaultNamespace,_hasOwnProperty:_hasOwnProperty,_isArray:_isArray};breeze.config.MetadataHelper=helper;var DT=breeze.DataType;var Validator=breeze.Validator;function addDataService(store,serviceName){store.addDataService(new breeze.DataService({serviceName:serviceName}));}
function addTypeToStore(store,typeDef){this.patch(typeDef);var type=typeDef.isComplexType?new breeze.ComplexType(typeDef):new breeze.EntityType(typeDef);store.addEntityType(type);this.inferValidators(type);this.addTypeNameAsResource(store,type);return type;}
function addTypeNameAsResource(store,type){if(!type.isComplexType){store.setEntityTypeForResourceName(type.shortName,type);}}
function convertValidators(typeName,propName,propDef){var validators=propDef.validators;if(!_isArray(validators)){propDef.validators=validators=[validators];}
validators.forEach(function(val,ix){if(val instanceof Validator)return;try{validators[ix]=Validator.fromJSON(val);}catch(ex){throw"{0}.{1}.validators[{2}] = '{3}' can't be converted to a known Validator.".format(typeName,propName,ix,JSON.stringify(val));}});}
function findEntityKey(typeDef){var dps=typeDef.dataProperties;var typenameId=typeDef.shortName.toLowerCase()+'id';for(var key in dps){var prop=dps[key];if(prop.isPartOfKey){return key;}
if(prop.isPartOfKey==null){var keyLc=key.toLowerCase();if(keyLc==='id'||keyLc===typenameId){prop.isPartOfKey=true;return key;}}}
return null;}
function inferDefaultResourceName(typeDef){if(typeDef.defaultResourceName===undefined){typeDef.defaultResourceName=this.pluralize(typeDef.shortName);}}
function inferValidators(entityType){entityType.dataProperties.forEach(function(prop){if(!prop.isNullable){addValidator(prop,Validator.required());};addValidator(prop,getDataTypeValidator(prop));if(prop.maxLength!=null&&prop.dataType===DT.String){addValidator(prop,Validator.maxLength({maxLength:prop.maxLength}));}});return entityType;function addValidator(prop,validator){if(!validator){return;}
var valName=validator.name;var validators=prop.validators;var found=validators.filter(function(val){return val.name==valName;});if(!found.length){validators.push(validator);}}
function getDataTypeValidator(prop){var dataType=prop.dataType;var validatorCtor=!dataType||dataType===DT.String?null:dataType.validatorCtor;return validatorCtor?validatorCtor():null;}}
function normalizeNavProp(key,prop){switch(typeof(prop)){case'string':return{entityTypeName:prop};case'object':return prop;default:var ename=key.substr(0,1).toUpperCase()+ key.substr(1);return{entityTypeName:ename};}}
function patch(typeDef){var key,prop;if(typeDef.name){renameAttrib(typeDef,'name','shortName');}
var typeName=typeDef.shortName;var namespace=typeDef.namespace=typeDef.namespace||this.defaultNamespace;if(!typeDef.isComplexType){this.inferDefaultResourceName(typeDef);this.findEntityKey(typeDef);typeDef.autoGeneratedKeyType=typeDef.autoGeneratedKeyType||this.defaultAutoGeneratedKeyType;}
var dps=typeDef.dataProperties;for(key in dps){prop=dps[key];this.replaceDataPropertyAliases(prop,key);if(prop.complexTypeName&&prop.complexTypeName.indexOf(":#")===-1){prop.complexTypeName+=':#'+ namespace;}
if(prop.isPartOfKey){prop.isNullable=prop.isNullable===true;}
if(prop.validators){this.convertValidators(typeName,key,prop);}};var navs=typeDef.navigationProperties;for(key in navs){prop=navs[key]=normalizeNavProp(key,navs[key]);this.replaceNavPropertyAliases(prop,key);var propTypeName=prop.entityTypeName;var nsStart=propTypeName.indexOf(":#");if(nsStart===-1){prop.entityTypeName+=':#'+ namespace;}else{propTypeName=propTypeName.slice(0,nsStart);}
if(prop.foreignKeyNames===undefined&&prop.isScalar!==false&&prop.invForeignKeyNames===undefined){var candidate1=key.toLowerCase()+'id';var candidate2=propTypeName.toLowerCase()+'id';var fk=Object.keys(dps).filter(function(k){k=k.toLowerCase();return k===candidate1||k===candidate2;})[0];if(fk){prop.foreignKeyNames=[fk];}}
if(prop.associationName===undefined){var isParent=prop.isScalar===false||prop.invForeignKeyNames||prop.foreignKeyNames===undefined;prop.associationName=(isParent?propTypeName:typeName)+'_'+
(isParent?typeName:propTypeName);}
var keyNames=prop.foreignKeyNames;if(keyNames&&!_isArray(keyNames)){prop.foreignKeyNames=[keyNames];}
keyNames=prop.invForeignKeyNames;if(keyNames&&!_isArray(keyNames)){prop.invForeignKeyNames=[keyNames];}};}
function pluralize(word){var len=word.length;switch(word[len- 1]){case's':return word+'es';case'x':return word+'es';case'y':return word.substr(0,len- 1)+'ies';default:return word+'s';}}
function renameAttrib(obj,oldName,newName){if(obj[newName]!==undefined){throw"renameAttrib error; new name, '"+ newName+"' is already defined for the object.";}
obj[newName]=obj[oldName];delete obj[oldName];}
function replaceDataPropertyAliases(prop,propertyName){for(var key in prop){if(_hasOwnProperty(prop,key)){var keyLc=key.toLowerCase();if(keyLc==='type'){renameAttrib(prop,key,'dataType');}else if(keyLc==='complex'||keyLc==='complextype'){renameAttrib(prop,key,'complexTypeName');}else if(keyLc==='max'&&(prop.dataType===undefined||prop.dataType===DT.String)){renameAttrib(prop,key,'maxLength');}else if(keyLc.indexOf('null')>-1&&key!=='isNullable'&&typeof(prop[key])==='boolean'){renameAttrib(prop,key,'isNullable');}else if(keyLc==='required'){prop[key]=!prop[key];renameAttrib(prop,key,'isNullable');}else if(keyLc.indexOf('key')>-1&&key!=='isPartOfKey'&&typeof(prop[key])==='boolean'){renameAttrib(prop,key,'isPartOfKey');}else if(keyLc==='default'){renameAttrib(prop,key,'defaultValue');}else if(keyLc==='isone'||keyLc==='hasone'){renameAttrib(prop,key,'isScalar');}else if(keyLc==='ismany'||keyLc==='hasmany'){prop[key]=!prop[key];renameAttrib(prop,key,'isScalar');}}}}
function replaceNavPropertyAliases(prop,propertyName){for(var key in prop){if(_hasOwnProperty(prop,key)){var keyLc=key.toLowerCase();if(keyLc==='type'){renameAttrib(prop,key,'entityTypeName');}else if(keyLc==='fk'||keyLc==='fks'||keyLc==='key'){renameAttrib(prop,key,'foreignKeyNames');}else if(keyLc==='isone'||keyLc==='hasone'){renameAttrib(prop,key,'isScalar');}else if(keyLc==='ismany'||keyLc==='hasmany'){prop[key]=!prop[key];renameAttrib(prop,key,'isScalar');}else if(keyLc==='invfk'||keyLc==='invfks'){renameAttrib(prop,key,'invForeignKeyNames');}else if(keyLc.indexOf('assoc')>-1&&key!=='associationName'){renameAttrib(prop,key,'associationName');}}}}
function setDefaultAutoGeneratedKeyType(autoGeneratedKeyType){this.defaultAutoGeneratedKeyType=autoGeneratedKeyType||breeze.AutoGeneratedKeyType.None;}
function setDefaultNamespace(namespace){this.defaultNamespace=namespace||'';}
function _hasOwnProperty(obj,key){return Object.prototype.hasOwnProperty.call(obj,key);}
function _isArray(obj){return Object.prototype.toString.call(obj)==='[object Array]';}},this));